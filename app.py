import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Cl√© API WeatherAPI
API_KEY = "7297e29b406a403ab5873732252704"  # Remplace par ta cl√© API

st.title("üåç Pollution de l'Air en Temps R√©el")

# Saisie de la ville par l'utilisateur
ville = st.text_input("üèôÔ∏è Entrez une ville (ex: Lom√©)", "Lome")

if st.button("üîÑ V√©rification de l'√©tat de pollution de la ville! (Cliquer ici)"):

    # Appel √† l'API WeatherAPI pour r√©cup√©rer les donn√©es m√©t√©o et AQI
    url = f"http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={ville}&aqi=yes"
    response = requests.get(url)

    if response.status_code != 200:
        st.error("Erreur lors de la r√©cup√©ration des donn√©es. V√©rifiez la ville ou la cl√© API.")
    else:
        # Extraire les donn√©es de la r√©ponse JSON
        data = response.json()
        current = data["current"]
        air = current.get("air_quality", {})

        # Affichage des donn√©es m√©t√©o actuelles
        st.markdown("### üå§Ô∏è Donn√©es m√©t√©o actuelles")
        st.write(f"Temp√©rature : {current['temp_c']} ¬∞C")
        st.write(f"Humidit√© : {current['humidity']} %")
        st.write(f"Pression : {current['pressure_mb']} mb")
        st.write(f"Vent : {current['wind_kph']} km/h")
        st.write(f"Indice UV : {current['uv']}")

        # Affichage des vraies valeurs de pollution en temps r√©el
        st.markdown("### üß™ Valeurs r√©elles de pollution")
        pm25 = air.get('pm2_5', 'n/a')
        pm10 = air.get('pm10', 'n/a')
        no2 = air.get('no2', 'n/a')
        so2 = air.get('so2', 'n/a')
        o3 = air.get('o3', 'n/a')

        st.write(f"PM2.5 : {pm25}")
        st.write(f"PM10 : {pm10}")
        st.write(f"NO2 : {no2}")
        st.write(f"SO2 : {so2}")
        st.write(f"O3 : {o3}")

        # Affichage d'un graphique en barres avec les valeurs de pollution
        pollution_data = {
            'Polluant': ['PM2.5', 'PM10', 'NO2', 'SO2', 'O3'],
            'Valeur': [pm25 if isinstance(pm25, (int, float)) else 0,
                       pm10 if isinstance(pm10, (int, float)) else 0,
                       no2 if isinstance(no2, (int, float)) else 0,
                       so2 if isinstance(so2, (int, float)) else 0,
                       o3 if isinstance(o3, (int, float)) else 0]
        }
        df_pollution = pd.DataFrame(pollution_data)

        # Cr√©ation du graphique avec matplotlib
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.bar(df_pollution['Polluant'], df_pollution['Valeur'], color=['blue', 'orange', 'green', 'red', 'purple'])
        ax.set_title(f"Situation de la pollution de l'air √† {ville}")
        ax.set_ylabel("Concentration (¬µg/m¬≥)")
        ax.set_xlabel("Polluants")
        st.pyplot(fig)

        # Cr√©ation d'un graphique interactif avec plotly
        fig_plotly = px.bar(df_pollution, x='Polluant', y='Valeur', color='Polluant',
                            title=f"Pollution de l'air √† {ville}",
                            labels={'Valeur': 'Concentration (¬µg/m¬≥)', 'Polluant': 'Type de polluant'})
        st.plotly_chart(fig_plotly)

        # Affichage de l'interpr√©tation de la qualit√© de l'air
        st.markdown("### üå¨Ô∏è Interpr√©tation de la qualit√© de l'air")
        if isinstance(pm25, (int, float)) and pm25 <= 10:
            st.info("Qualit√© de l'air : Bonne üëç")
        elif isinstance(pm25, (int, float)) and pm25 <= 25:
            st.info("Qualit√© de l'air : Mod√©r√©e")
        elif isinstance(pm25, (int, float)) and pm25 <= 50:
            st.warning("Qualit√© de l'air : Mauvaise - Sensible pour les groupes √† risque")
        else:
            st.error("Qualit√© de l'air : Tr√®s mauvaise ‚ùå")

st.text("üèôÔ∏è Kpatchaa te remercie pour ta confiance")